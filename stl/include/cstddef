#pragma once

#include <stddef.h>

namespace std {
    using ::ptrdiff_t;
    using ::size_t;
    using ::max_align_t;
    using nullptr_t = decltype(nullptr);

    enum class byte : unsigned char {};

    template<typename IntegerType>
    constexpr IntegerType to_integer(std::byte b) noexcept {
        return IntegerType{b};
    }

    template<typename IntegerType>
    constexpr std::byte &operator<<=(std::byte &b, IntegerType shift) noexcept {
        return b = std::byte(static_cast<unsigned char>(b) << shift);
    }

    template<typename IntegerType>
    constexpr std::byte &operator>>=(std::byte &b, IntegerType shift) noexcept {
        return b = std::byte(static_cast<unsigned char>(b) >> shift);
    }

    template<typename IntegerType>
    constexpr std::byte operator<<(std::byte b, IntegerType shift) noexcept {
        return std::byte(static_cast<unsigned char>(b) << shift);
    }

    template<typename IntegerType>
    constexpr std::byte operator>>(std::byte b, IntegerType shift) noexcept {
        return std::byte(static_cast<unsigned char>(b) >> shift);
    }

    constexpr std::byte &operator|=(std::byte &l, std::byte r) noexcept {
        return l = std::byte(static_cast<unsigned char>(l) | static_cast<unsigned char>(r));
    }

    constexpr std::byte &operator&=(std::byte &l, std::byte r) noexcept {
        return l = std::byte(static_cast<unsigned char>(l) & static_cast<unsigned char>(r));
    }

    constexpr std::byte &operator^=(std::byte &l, std::byte r) noexcept {
        return l = std::byte(static_cast<unsigned char>(l) ^ static_cast<unsigned char>(r));
    }

    constexpr std::byte operator|(std::byte l, std::byte r) noexcept {
        return std::byte(static_cast<unsigned char>(l) |
                         static_cast<unsigned char>(r));
    }

    constexpr std::byte operator&(std::byte l, std::byte r) noexcept {
        return std::byte(static_cast<unsigned char>(l) &
                         static_cast<unsigned char>(r));
    }

    constexpr std::byte operator^(std::byte l, std::byte r) noexcept {
        return std::byte(static_cast<unsigned char>(l) ^
                         static_cast<unsigned char>(r));
    }

    constexpr std::byte operator~(std::byte b) noexcept {
        return std::byte(~static_cast<unsigned char>(b));
    }
}

