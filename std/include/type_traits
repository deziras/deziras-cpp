#pragma once

namespace std {
    template<typename T, T v>
    struct integral_constant {
        using value_type = T;
        using type =  integral_constant;

        static constexpr value_type value = v;

        constexpr operator value_type() const noexcept {
            return value;
        }

        constexpr auto operator()() const noexcept -> value_type {
            return value;
        }
    };

    template<bool B>
    using bool_constant = integral_constant<bool, B>;
    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    template<typename T>
    struct is_const : std::false_type {};
    template<typename T>
    struct is_const<const T> : std::true_type {};

    template<typename T>
    struct is_volatile : std::false_type {};
    template<typename T>
    struct is_volatile<volatile T> : std::true_type {};


    template<typename T, typename U>
    struct is_same : std::false_type {};

    template<typename T>
    struct is_same<T, T> : std::true_type {};


    template<typename T>
    struct remove_const { using type = T; };

    template<typename T>
    struct remove_const<const T> { using type = T; };

    template<typename T>
    struct remove_volatile { using type = T; };

    template<typename T>
    struct remove_volatile<volatile T> { using type = T; };

    template<typename T>
    struct remove_cv {
        using type = typename std::remove_volatile<typename std::remove_const<T>::type>::type;
    };

    template<typename T>
    using remove_const_t = typename remove_const<T>::type;

    template<typename T>
    using remove_volatile_t = typename remove_volatile<T>::type;

    template<typename T>
    using remove_cv_t = typename remove_cv<T>::type;


    template<typename T>
    struct add_const { using type = const T; };

    template<typename T>
    struct add_volatile { using type = volatile T; };

    template<typename T>
    struct add_cv { using type = const volatile T; };

    template<typename T>
    using add_const_t = typename add_const<T>::type;

    template<typename T>
    using add_volatile_t = typename add_volatile<T>::type;

    template<typename T>
    using add_cv_t = typename add_cv<T>::type;


    template<class T>
    struct remove_reference { using type =  T; };

    template<class T>
    struct remove_reference<T &> { using type =  T; };

    template<class T>
    struct remove_reference<T &&> { using type =  T; };

    template< class T >
    using remove_reference_t = typename remove_reference<T>::type;

}

