#pragma once

#include <cstddef>

namespace std { //todo
    template<typename T, T v>
    struct integral_constant {
        using value_type = T;
        using type =  integral_constant;

        static constexpr value_type value = v;

        constexpr operator value_type() const noexcept {
            return value;
        }

        constexpr auto operator()() const noexcept -> value_type {
            return value;
        }
    };

    template<bool B>
    using bool_constant = integral_constant<bool, B>;
    using true_type = bool_constant<true>;
    using false_type = bool_constant<false>;

    // helper traits
    template<bool, typename T = void>
    struct enable_if; //todo

    template<bool, typename T, typename F>
    struct conditional; //todo

    // Primary classification traits:

    // template<typename T> struct is_void;
    template<typename T>
    struct is_void : std::is_same<void, typename std::remove_cv<T>::type> {};

    // template<typename T> struct is_null_pointer;
    template<typename T>
    struct is_null_pointer : std::is_same<nullptr_t, typename std::remove_cv<T>::type> {};

    template<typename T>
    struct is_integral;
    template<typename T>
    struct is_floating_point;
    template<typename T>
    struct is_array;
    template<typename T>
    struct is_pointer;

    // template<typename T> struct is_lvalue_reference;
    template<typename T>
    struct is_lvalue_reference : std::false_type {};
    template<typename T>
    struct is_lvalue_reference<T &> : std::true_type {};

    // template<typename T> struct is_rvalue_reference;
    template<typename T>
    struct is_rvalue_reference : std::false_type {};
    template<typename T>
    struct is_rvalue_reference<T &&> : std::true_type {};

    template<typename T>
    struct is_member_object_pointer;
    template<typename T>
    struct is_member_function_pointer;
    template<typename T>
    struct is_enum;
    template<typename T>
    struct is_union;
    template<typename T>
    struct is_class;
    template<typename T>
    struct is_function;

    // Secondary classification traits:
    template<class T>
    struct is_reference;
    template<class T>
    struct is_arithmetic;
    template<class T>
    struct is_fundamental;
    template<class T>
    struct is_member_pointer;
    template<class T>
    struct is_scalar;
    template<class T>
    struct is_object;
    template<class T>
    struct is_compound;

    // Const-volatile properties and transformations:

    // template<typename T> struct is_const;
    template<typename T>
    struct is_const : std::false_type {};
    template<typename T>
    struct is_const<const T> : std::true_type {};

    // template<typename T> struct is_volatile;
    template<typename T>
    struct is_volatile : std::false_type {};
    template<typename T>
    struct is_volatile<volatile T> : std::true_type {};

    // template<typename T> struct remove_const;
    template<typename T>
    struct remove_const { using type =  T; };
    template<typename T>
    struct remove_const<const T> { using type =  T; };

    // template<typename T> struct remove_volatile;
    template<typename T>
    struct remove_volatile { using type =  T; };
    template<typename T>
    struct remove_volatile<volatile T> { using type =  T; };

    // template<typename T> struct remove_cv;
    template<typename T>
    struct remove_cv {
        using type = typename remove_const<typename remove_volatile<T>::type>::type;
    };

    // template<typename T> struct add_const;
    template<typename T>
    struct add_const {
        using type = const T;
    };
    // template<typename T> struct add_volatile;
    template<typename T>
    struct add_volatile {
        using type = volatile T;
    };
    // template<typename T> struct add_cv;
    template<typename T>
    struct add_cv {
        using type = const volatile T;
    };

    // Reference transformations:

    //template<typename T> struct remove_reference;
    template<typename T>
    struct remove_reference { using type = T; };
    template<typename T>
    struct remove_reference<T &> { using type = T; };
    template<typename T>
    struct remove_reference<T &&> { using type = T; };

    template<class T>
    struct add_lvalue_reference;
    template<class T>
    struct add_rvalue_reference;

    // Pointer transformations:
    template<class T>
    struct remove_pointer;
    template<class T>
    struct add_pointer;

    // Integral properties:
    template<class T>
    struct is_signed;
    template<class T>
    struct is_unsigned;
    template<class T>
    struct make_signed;
    template<class T>
    struct make_unsigned;

    // Array properties and transformations:
    template<class T>
    struct rank;
    template<class T, unsigned I = 0>
    struct extent;
    template<class T>
    struct remove_extent;
    template<class T>
    struct remove_all_extents;

    // Member introspection:
    template<class T>
    struct is_pod;
    template<class T>
    struct is_trivial;
    template<class T>
    struct is_trivially_copyable;
    template<class T>
    struct is_standard_layout;
    template<class T>
    struct is_literal_type;
    template<class T>
    struct is_empty;
    template<class T>
    struct is_polymorphic;
    template<class T>
    struct is_abstract;

    template<class T, class... Args>
    struct is_constructible;
    template<class T>
    struct is_default_constructible;
    template<class T>
    struct is_copy_constructible;
    template<class T>
    struct is_move_constructible;
    template<class T, class U>
    struct is_assignable;
    template<class T>
    struct is_copy_assignable;
    template<class T>
    struct is_move_assignable;
    template<class T>
    struct is_destructible;

    template<class T, class... Args>
    struct is_trivially_constructible;
    template<class T>
    struct is_trivially_default_constructible;
    template<class T>
    struct is_trivially_copy_constructible;
    template<class T>
    struct is_trivially_move_constructible;
    template<class T, class U>
    struct is_trivially_assignable;
    template<class T>
    struct is_trivially_copy_assignable;
    template<class T>
    struct is_trivially_move_assignable;
    template<class T>
    struct is_trivially_destructible;

    template<class T, class... Args>
    struct is_nothrow_constructible;
    template<class T>
    struct is_nothrow_default_constructible;
    template<class T>
    struct is_nothrow_copy_constructible;
    template<class T>
    struct is_nothrow_move_constructible;
    template<class T, class U>
    struct is_nothrow_assignable;
    template<class T>
    struct is_nothrow_copy_assignable;
    template<class T>
    struct is_nothrow_move_assignable;
    template<class T>
    struct is_nothrow_destructible;

    template<class T>
    struct has_virtual_destructor;

    // Relationships between types:
    template<class T, class U>
    struct is_same;
    template<class Base, class Derived>
    struct is_base_of;
    template<class From, class To>
    struct is_convertible;

    template<class Fn, class... ArgTypes>
    struct is_invocable;
    template<class R, class Fn, class... ArgTypes>
    struct is_invocable_r;

    template<class Fn, class... ArgTypes>
    struct is_nothrow_invocable;
    template<class R, class Fn, class... ArgTypes>
    struct is_nothrow_invocable_r;

    // Alignment properties and transformations:
    template<class T>
    struct alignment_of;
    template<size_t Len, size_t Align = 0> //fixme
    struct aligned_storage;
    template<size_t Len, class... Types>
    struct aligned_union;
    template<class T>
    struct remove_cvref; // C++20

    template<class T>
    struct decay;
    template<class... T>
    struct common_type;
    template<class T>
    struct underlying_type;

    template<class>
    class result_of; // undefined
    template<class Fn, class... ArgTypes>
    class result_of<Fn(ArgTypes...)>;
}

