#pragma once

#include <cstddef>
#include <exception>

namespace std {
    class bad_alloc : public exception {
    public:
        bad_alloc() noexcept = default;

        bad_alloc(bad_alloc const &) noexcept = default;

        virtual char const *what() const noexcept override;
    };

    class bad_array_new_length : public bad_alloc {
    public:
        bad_array_new_length() noexcept = default;

        bad_array_new_length(bad_array_new_length const &) noexcept = default;

        bad_array_new_length(bad_array_new_length &&) = default;

        virtual char const *what() const noexcept override;
    };

    struct nothrow_t {
        explicit nothrow_t() = default;
    };

    extern const nothrow_t nothrow;

    using new_handler = void (*)();

    std::new_handler get_new_handler() noexcept;

    std::new_handler set_new_handler(std::new_handler new_p);

    enum class align_val_t : std::size_t {
    };

}

void *operator new(std::size_t);

void *operator new(std::size_t size, std::align_val_t alignment);

void *operator new(std::size_t, std::nothrow_t const &) noexcept;

void *operator new(std::size_t size, std::align_val_t alignment, std::nothrow_t const &) noexcept;

inline
void *operator new(std::size_t, void *ptr) {
    return ptr;
}


void operator delete(void *);

void operator delete(void *, std::nothrow_t const &) noexcept;

inline
void operator delete(void *, void *) noexcept {}


void *operator new[](std::size_t);

void *operator new[](std::size_t size, std::align_val_t alignment);

void *operator new[](std::size_t, std::nothrow_t const &) noexcept;

void *operator new[](std::size_t size, std::align_val_t alignment, std::nothrow_t const &) noexcept;

inline
void *operator new[](std::size_t, void *ptr) {
    return ptr;
}

void operator delete[](void *);

void operator delete[](void *, std::nothrow_t const &) noexcept;

inline
void operator delete[](void *, void *) noexcept {}


