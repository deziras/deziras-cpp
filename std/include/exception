#pragma once

#include <cstdlib>
#include "cstdio"

namespace std {
    class exception {
    public:
        exception() noexcept;

        exception(exception const &) noexcept;

        exception &operator=(exception const &) noexcept;

        virtual ~exception();

        virtual char const *what() const noexcept;
    };

    class bad_exception : public exception {
    public:
        bad_exception() noexcept;

        bad_exception(bad_exception const &) noexcept;

        bad_exception &operator=(bad_exception const &) noexcept;

        virtual ~bad_exception();

        virtual char const *what() const noexcept override;
    };

    using unexpected_handler = void (*)();

    unexpected_handler get_unexpected() noexcept;

    unexpected_handler set_unexpected(unexpected_handler f) noexcept;

    [[noreturn]]
    void unexpected();

    using terminate_handler  = void (*)();

    terminate_handler get_terminate() noexcept;

    terminate_handler set_terminate(terminate_handler f) noexcept;

    [[noreturn]]
    void terminate() noexcept;

    int uncaught_exceptions() noexcept;

    bool uncaught_exception() noexcept;

    class exception_ptr;

    exception_ptr current_exception() noexcept;

    [[noreturn]]
    void rethrow_exception(exception_ptr);


    class exception_ptr {
        void *__ptr_;
    public:
        exception_ptr() noexcept;

        exception_ptr(exception_ptr const &) noexcept;

        //exception_ptr(nullptr_t) noexcept;

        exception_ptr &operator=(exception_ptr const &) noexcept;

        ~exception_ptr() noexcept;

        inline operator bool() const noexcept { return __ptr_ != nullptr; }

        friend inline
        bool operator==(exception_ptr const &__x, exception_ptr const &__y) noexcept {
            return __x.__ptr_ == __y.__ptr_;
        }

        friend inline
        bool operator!=(exception_ptr const &__x, exception_ptr const &__y) noexcept {
            return !(__x == __y);
        }

        friend exception_ptr current_exception() noexcept;

        friend void rethrow_exception(exception_ptr);
    };

    template<typename E>
    exception_ptr make_exception_ptr(E e) noexcept {
        try {
            throw e;
        } catch (...) {
            return current_exception();
        }
    }

    class nested_exception {
        exception_ptr __ptr_;
    public:
        nested_exception() noexcept;

        virtual ~nested_exception() noexcept;

        [[noreturn]]
        void rethrow_nested() const;

        exception_ptr nested_ptr() const noexcept { return __ptr_; }
    };

    template<typename T>
    [[noreturn]]
    void throw_with_nested(T &&t); //todo

    template<class E>
    void rethrow_if_nested(E const &e); //todo
}