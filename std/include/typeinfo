#pragma once

#include <cstddef>
#include <exception>
#include <cstdint>

namespace std {
    class type_info {
        type_info(type_info const &rhs) = delete;

        type_info &operator=(type_info const &rhs) = delete;

    protected:
        char const *__type_name;

        explicit type_info(const char *name) : __type_name(name) {}

        type_info() = default;

    public:
        virtual ~type_info();

        bool operator==(type_info const &other) const noexcept {
            return __type_name == other.__type_name;
        }

        bool operator!=(type_info const &other) const noexcept {
            return !this->operator==(other);
        }

        bool before(type_info const &__arg) const noexcept {
            return __type_name < __arg.__type_name;
        }

        size_t hash_code() const noexcept {
            return reinterpret_cast<size_t >(__type_name);
        }

        char const *name() const noexcept {
            return __type_name;
        }

    };

    class bad_cast : public exception {
    public:
        bad_cast() noexcept = default;

        bad_cast(const bad_cast &) noexcept = default;

        bad_cast &operator=(const bad_cast &) noexcept = default;

        const char *what() const noexcept override;
    };

}

